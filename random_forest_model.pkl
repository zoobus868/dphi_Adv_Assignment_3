{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "random_forest_model",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMkd/b+NZ4WTP1cby12IOxe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zoobus868/dphi_Adv_Assignment_3/blob/main/random_forest_model.pkl\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XapXhuVxsn9x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55b8a71b-f2f4-4231-ba17-a77cb1d87459"
      },
      "source": [
        "import pandas as pd\r\n",
        "import seaborn as sns\r\n",
        "import numpy as np\r\n",
        "import seaborn as sns\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from imblearn.over_sampling import SMOTE\r\n",
        "from sklearn import preprocessing\r\n",
        "from sklearn.preprocessing import LabelEncoder\r\n",
        "from sklearn.linear_model import LogisticRegression\r\n",
        "from sklearn.metrics import f1_score\r\n",
        "from sklearn import tree\r\n",
        "from sklearn.feature_selection import SelectFromModel\r\n",
        "from sklearn.metrics import accuracy_score, f1_score\r\n",
        "from sklearn.ensemble import RandomForestClassifier "
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
            "  \"(https://pypi.org/project/six/).\", FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xs-6HNJZs9O9"
      },
      "source": [
        "loan_data  = pd.read_csv(\"https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_train.csv\" )"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TWrB6CNPs9L7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "c2f583fe-a172-4979-bb3a-8cccde389aca"
      },
      "source": [
        "loan_data"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>LP002305</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4547</td>\n",
              "      <td>0.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>LP001715</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>5703</td>\n",
              "      <td>0.0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>LP002086</td>\n",
              "      <td>Female</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4333</td>\n",
              "      <td>2451.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>LP001136</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4695</td>\n",
              "      <td>0.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>LP002529</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6700</td>\n",
              "      <td>1750.0</td>\n",
              "      <td>230.0</td>\n",
              "      <td>300.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>486</td>\n",
              "      <td>LP002103</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>9833</td>\n",
              "      <td>1833.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>487</td>\n",
              "      <td>LP001790</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>3812</td>\n",
              "      <td>0.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>488</td>\n",
              "      <td>LP001401</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>14583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>185.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>489</th>\n",
              "      <td>489</td>\n",
              "      <td>LP002893</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>1836</td>\n",
              "      <td>33837.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>490</th>\n",
              "      <td>490</td>\n",
              "      <td>LP002777</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2785</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>491 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Unnamed: 0   Loan_ID  Gender  ... Credit_History Property_Area Loan_Status\n",
              "0             0  LP002305  Female  ...            1.0     Semiurban           1\n",
              "1             1  LP001715    Male  ...            1.0         Rural           1\n",
              "2             2  LP002086  Female  ...            1.0         Urban           0\n",
              "3             3  LP001136    Male  ...            1.0         Urban           1\n",
              "4             4  LP002529    Male  ...            1.0     Semiurban           1\n",
              "..          ...       ...     ...  ...            ...           ...         ...\n",
              "486         486  LP002103     NaN  ...            1.0         Urban           1\n",
              "487         487  LP001790  Female  ...            1.0         Rural           1\n",
              "488         488  LP001401    Male  ...            1.0         Rural           1\n",
              "489         489  LP002893    Male  ...            1.0         Urban           0\n",
              "490         490  LP002777    Male  ...            1.0         Rural           1\n",
              "\n",
              "[491 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B4rccMs-s9JE",
        "outputId": "539a6a03-65d3-4e0a-c616-203891ec81f6"
      },
      "source": [
        "loan_data.info()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 491 entries, 0 to 490\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Unnamed: 0         491 non-null    int64  \n",
            " 1   Loan_ID            491 non-null    object \n",
            " 2   Gender             481 non-null    object \n",
            " 3   Married            490 non-null    object \n",
            " 4   Dependents         482 non-null    object \n",
            " 5   Education          491 non-null    object \n",
            " 6   Self_Employed      462 non-null    object \n",
            " 7   ApplicantIncome    491 non-null    int64  \n",
            " 8   CoapplicantIncome  491 non-null    float64\n",
            " 9   LoanAmount         475 non-null    float64\n",
            " 10  Loan_Amount_Term   478 non-null    float64\n",
            " 11  Credit_History     448 non-null    float64\n",
            " 12  Property_Area      491 non-null    object \n",
            " 13  Loan_Status        491 non-null    int64  \n",
            "dtypes: float64(4), int64(3), object(7)\n",
            "memory usage: 53.8+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "tO2Dfp6is9GP",
        "outputId": "4560fe81-fd90-47c0-f115-73256cad8921"
      },
      "source": [
        "loan_data.describe()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>491.000000</td>\n",
              "      <td>491.000000</td>\n",
              "      <td>491.000000</td>\n",
              "      <td>475.000000</td>\n",
              "      <td>478.000000</td>\n",
              "      <td>448.000000</td>\n",
              "      <td>491.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>245.000000</td>\n",
              "      <td>5401.189409</td>\n",
              "      <td>1589.730998</td>\n",
              "      <td>145.014737</td>\n",
              "      <td>341.297071</td>\n",
              "      <td>0.848214</td>\n",
              "      <td>0.698574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>141.883755</td>\n",
              "      <td>6419.427177</td>\n",
              "      <td>2919.320624</td>\n",
              "      <td>86.310534</td>\n",
              "      <td>66.964051</td>\n",
              "      <td>0.359214</td>\n",
              "      <td>0.459345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>122.500000</td>\n",
              "      <td>2923.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>360.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>245.000000</td>\n",
              "      <td>3865.000000</td>\n",
              "      <td>1229.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>360.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>367.500000</td>\n",
              "      <td>5705.500000</td>\n",
              "      <td>2251.500000</td>\n",
              "      <td>162.000000</td>\n",
              "      <td>360.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>490.000000</td>\n",
              "      <td>81000.000000</td>\n",
              "      <td>41667.000000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>480.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Unnamed: 0  ApplicantIncome  ...  Credit_History  Loan_Status\n",
              "count  491.000000       491.000000  ...      448.000000   491.000000\n",
              "mean   245.000000      5401.189409  ...        0.848214     0.698574\n",
              "std    141.883755      6419.427177  ...        0.359214     0.459345\n",
              "min      0.000000       150.000000  ...        0.000000     0.000000\n",
              "25%    122.500000      2923.500000  ...        1.000000     0.000000\n",
              "50%    245.000000      3865.000000  ...        1.000000     1.000000\n",
              "75%    367.500000      5705.500000  ...        1.000000     1.000000\n",
              "max    490.000000     81000.000000  ...        1.000000     1.000000\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "AUyaC9gE9EzX",
        "outputId": "2f416b51-f105-465d-85f2-41f9fb20204c"
      },
      "source": [
        "corrmat = loan_data.corr()\r\n",
        "plt.figure(figsize=(10,6))\r\n",
        "sns.heatmap(corrmat, annot=True, cmap=\"RdYlGn\")"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8fdb42b00>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "SPuwCAjr8YZo",
        "outputId": "2df328b5-630a-461c-f14e-0f8bddf19d16"
      },
      "source": [
        "sns.heatmap(loan_data.isnull(), yticklabels = False, cbar = False, cmap=\"Blues\")#check for null values"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8fb1a40b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ODjj_YFi8YXI",
        "outputId": "87327bd2-1a1e-4127-9086-05a10705cec5"
      },
      "source": [
        "loan_data.hist(bins = 30, figsize = (20,20), color = 'b')"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fac935c0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fac45828>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fac78a90>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fac2ccf8>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fabe2f60>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8faba2208>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fab54470>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fab086a0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fb8fab08710>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bc_GlS3q8YU3"
      },
      "source": [
        "loan_data.drop(['Unnamed: 0'], axis =1, inplace=True)\r\n",
        "loan_data.drop(['Loan_ID'], axis =1, inplace=True)\r\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "UmCHpDGL-dCW",
        "outputId": "10153b84-28a3-433e-aa9f-9e67f4a93c6e"
      },
      "source": [
        "loan_data"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4547</td>\n",
              "      <td>0.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>5703</td>\n",
              "      <td>0.0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Female</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4333</td>\n",
              "      <td>2451.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4695</td>\n",
              "      <td>0.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6700</td>\n",
              "      <td>1750.0</td>\n",
              "      <td>230.0</td>\n",
              "      <td>300.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>9833</td>\n",
              "      <td>1833.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>3812</td>\n",
              "      <td>0.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>14583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>185.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>489</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>1836</td>\n",
              "      <td>33837.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>490</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2785</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>491 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Gender Married Dependents  ... Credit_History Property_Area  Loan_Status\n",
              "0    Female      No          0  ...            1.0     Semiurban            1\n",
              "1      Male     Yes         3+  ...            1.0         Rural            1\n",
              "2    Female     Yes          0  ...            1.0         Urban            0\n",
              "3      Male     Yes          0  ...            1.0         Urban            1\n",
              "4      Male     Yes          2  ...            1.0     Semiurban            1\n",
              "..      ...     ...        ...  ...            ...           ...          ...\n",
              "486     NaN     Yes          1  ...            1.0         Urban            1\n",
              "487  Female      No          1  ...            1.0         Rural            1\n",
              "488    Male     Yes          1  ...            1.0         Rural            1\n",
              "489    Male      No          0  ...            1.0         Urban            0\n",
              "490    Male     Yes          0  ...            1.0         Rural            1\n",
              "\n",
              "[491 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YVIYuF658YRu"
      },
      "source": [
        "loan_data['Gender'] = loan_data['Gender'].fillna(loan_data['Gender'].mode()[0])\r\n",
        "loan_data['Married'] = loan_data['Married'].fillna(loan_data['Married'].mode()[0])\r\n",
        "loan_data['Dependents'] = loan_data['Dependents'].fillna(loan_data['Dependents'].mode()[0])\r\n",
        "loan_data['Self_Employed'] = loan_data['Self_Employed'].fillna(loan_data['Self_Employed'].mode()[0])\r\n",
        "loan_data['LoanAmount'] = loan_data['LoanAmount'].fillna(loan_data['LoanAmount'].mode()[0])\r\n",
        "loan_data['Credit_History'] = loan_data['Credit_History'].fillna(loan_data['Credit_History'].mode()[0])\r\n",
        "loan_data['Loan_Amount_Term'] = loan_data['Loan_Amount_Term'].fillna(loan_data['Loan_Amount_Term'].mode()[0])"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ugI_JOMC8YOw",
        "outputId": "c7c8c507-60f3-4298-e8b1-3af65aac633a"
      },
      "source": [
        "loan_data.info()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 491 entries, 0 to 490\n",
            "Data columns (total 12 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Gender             491 non-null    object \n",
            " 1   Married            491 non-null    object \n",
            " 2   Dependents         491 non-null    object \n",
            " 3   Education          491 non-null    object \n",
            " 4   Self_Employed      491 non-null    object \n",
            " 5   ApplicantIncome    491 non-null    int64  \n",
            " 6   CoapplicantIncome  491 non-null    float64\n",
            " 7   LoanAmount         491 non-null    float64\n",
            " 8   Loan_Amount_Term   491 non-null    float64\n",
            " 9   Credit_History     491 non-null    float64\n",
            " 10  Property_Area      491 non-null    object \n",
            " 11  Loan_Status        491 non-null    int64  \n",
            "dtypes: float64(4), int64(2), object(6)\n",
            "memory usage: 46.2+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbiJZFUw8YKk"
      },
      "source": [
        "x = loan_data.drop('Loan_Status',axis = 1)\r\n",
        "y = loan_data['Loan_Status']"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rbozEWl58YHm"
      },
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 1, stratify = y)  "
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "y_zmjTitB7q0",
        "outputId": "4da4793e-4e7f-42ee-82b6-3fe772ea5613"
      },
      "source": [
        "sns.countplot(y_train)\r\n",
        "plt.show"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jtMskgfwC7QM"
      },
      "source": [
        "x_train = pd.get_dummies(x_train, prefix_sep='_', drop_first=True)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "id": "IFBbd4VwC_Qc",
        "outputId": "874fd1a5-abd0-41e8-c18e-245e78d4634f"
      },
      "source": [
        "x_train"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Gender_Male</th>\n",
              "      <th>Married_Yes</th>\n",
              "      <th>Dependents_1</th>\n",
              "      <th>Dependents_2</th>\n",
              "      <th>Dependents_3+</th>\n",
              "      <th>Education_Not Graduate</th>\n",
              "      <th>Self_Employed_Yes</th>\n",
              "      <th>Property_Area_Semiurban</th>\n",
              "      <th>Property_Area_Urban</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>2275</td>\n",
              "      <td>2067.000000</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>472</th>\n",
              "      <td>14866</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>70.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>3430</td>\n",
              "      <td>1250.000000</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>5746</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>255.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>429</th>\n",
              "      <td>4191</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>3400</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>173.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>5849</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>2058</td>\n",
              "      <td>2134.000000</td>\n",
              "      <td>88.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>3013</td>\n",
              "      <td>3033.000000</td>\n",
              "      <td>95.0</td>\n",
              "      <td>300.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>352</th>\n",
              "      <td>2920</td>\n",
              "      <td>16.120001</td>\n",
              "      <td>87.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>368 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     ApplicantIncome  ...  Property_Area_Urban\n",
              "365             2275  ...                    1\n",
              "472            14866  ...                    1\n",
              "295             3430  ...                    0\n",
              "413             5746  ...                    1\n",
              "429             4191  ...                    0\n",
              "..               ...  ...                  ...\n",
              "30              3400  ...                    0\n",
              "146             5849  ...                    1\n",
              "140             2058  ...                    1\n",
              "251             3013  ...                    1\n",
              "352             2920  ...                    0\n",
              "\n",
              "[368 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cDANzVD5QfnP"
      },
      "source": [
        ""
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5lZZbspCB7ok"
      },
      "source": [
        "sm = SMOTE(random_state = 25, sampling_strategy = 1.0) "
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-Lt9OAgB7mK",
        "outputId": "e6e2eac2-c123-4197-f7c6-3cd71f5ed6d0"
      },
      "source": [
        "x_train, y_train = sm.fit_sample(x_train, y_train)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "j4Vn1TkDB7jv",
        "outputId": "899a0b31-4acb-4206-f7a9-de6e0f8f5957"
      },
      "source": [
        "sns.countplot(y_train)\r\n",
        "plt.show"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VtuKyqH1Mi9O",
        "outputId": "eb2a39da-356a-48d0-8295-7b31d9ce62c0"
      },
      "source": [
        "x_train"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2.27500000e+03, 2.06700000e+03, 1.20000000e+02, ...,\n",
              "        0.00000000e+00, 0.00000000e+00, 1.00000000e+00],\n",
              "       [1.48660000e+04, 0.00000000e+00, 7.00000000e+01, ...,\n",
              "        0.00000000e+00, 0.00000000e+00, 1.00000000e+00],\n",
              "       [3.43000000e+03, 1.25000000e+03, 1.28000000e+02, ...,\n",
              "        0.00000000e+00, 1.00000000e+00, 0.00000000e+00],\n",
              "       ...,\n",
              "       [4.43569429e+03, 0.00000000e+00, 1.12000000e+02, ...,\n",
              "        0.00000000e+00, 4.17296639e-01, 0.00000000e+00],\n",
              "       [5.07782735e+03, 1.77701506e+03, 1.75316932e+02, ...,\n",
              "        0.00000000e+00, 0.00000000e+00, 4.84153379e-01],\n",
              "       [4.64701013e+03, 0.00000000e+00, 1.22575214e+02, ...,\n",
              "        4.08028070e-01, 0.00000000e+00, 5.91971930e-01]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qw8kOSIIB7g4",
        "outputId": "b2c373d1-889a-45fd-fecc-685c6139f915"
      },
      "source": [
        "model = LogisticRegression(max_iter = 2000)\r\n",
        "model.fit(x_train,y_train)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=2000,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_3fbPxKjB7eo",
        "outputId": "18378de6-13b0-492e-a442-9effc5cd4373"
      },
      "source": [
        "f1_score(y_train, model.predict(x_train))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7793103448275861"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "idClcwn6B7bV",
        "outputId": "78123261-0a0e-41f0-f0a2-65398196b47a"
      },
      "source": [
        "model_t = tree.DecisionTreeClassifier()\r\n",
        "model_t.fit(x_train,y_train)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
              "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                       random_state=None, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MPczEEDNOTj5",
        "outputId": "99073d2e-59a4-4902-b298-232dc934091d"
      },
      "source": [
        "model_t.score(x_train,y_train)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uKgqxXQ5PLCN"
      },
      "source": [
        "forest = RandomForestClassifier(random_state=1, n_estimators=2000, max_depth=10)"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eve4We55Pi8t",
        "outputId": "d2c8abc6-29b2-4f32-826a-aaefba8dd503"
      },
      "source": [
        "forest.fit(x_train, y_train)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=10, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=2000,\n",
              "                       n_jobs=None, oob_score=False, random_state=1, verbose=0,\n",
              "                       warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ALGFdIvuPK9u",
        "outputId": "154ceac1-8f91-493c-d2ae-76ebc8a5911e"
      },
      "source": [
        "f1_score(y_train, forest.predict(x_train))"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9753320683111955"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "BZWnWAYDOThJ",
        "outputId": "0b53aea9-d415-4214-a37e-2963288cabe2"
      },
      "source": [
        "x_test"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>256</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>1863</td>\n",
              "      <td>1041.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2138</td>\n",
              "      <td>0.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Semiurban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6540</td>\n",
              "      <td>0.0</td>\n",
              "      <td>205.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>1880</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>185</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5124</td>\n",
              "      <td>0.0</td>\n",
              "      <td>124.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Rural</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>366</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2483</td>\n",
              "      <td>2466.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Rural</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Female</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4333</td>\n",
              "      <td>2451.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2550</td>\n",
              "      <td>2042.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>460</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2178</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>300.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Rural</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>3+</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4707</td>\n",
              "      <td>1993.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Semiurban</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>123 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Gender Married Dependents  ... Loan_Amount_Term Credit_History  Property_Area\n",
              "256    Male     Yes          0  ...            360.0            1.0      Semiurban\n",
              "144  Female      No          0  ...            360.0            0.0      Semiurban\n",
              "389    Male     Yes          2  ...            360.0            1.0      Semiurban\n",
              "342    Male     Yes          1  ...            360.0            1.0          Rural\n",
              "185    Male      No          0  ...            360.0            0.0          Rural\n",
              "..      ...     ...        ...  ...              ...            ...            ...\n",
              "366    Male     Yes          0  ...            180.0            0.0          Rural\n",
              "2    Female     Yes          0  ...            360.0            1.0          Urban\n",
              "132    Male      No          0  ...            360.0            1.0          Rural\n",
              "460    Male     Yes          1  ...            300.0            0.0          Rural\n",
              "86     Male      No         3+  ...            360.0            1.0      Semiurban\n",
              "\n",
              "[123 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RBxhefTrOTcG"
      },
      "source": [
        "x_test = pd.get_dummies(x_test, prefix_sep='_', drop_first=True)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r-JPY3FuOTZg",
        "outputId": "f06a15d8-787e-4497-bbc4-ea280afd22df"
      },
      "source": [
        "model = LogisticRegression(max_iter = 2000)\r\n",
        "model.fit(x_test,y_test)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=2000,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZXjDVlvOTWw",
        "outputId": "2ff9b04b-623f-4ee1-b945-6d7b83512257"
      },
      "source": [
        "f1_score(y_test, model.predict(x_test))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8691099476439791"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f5XsZ2Tg0Cvo"
      },
      "source": [
        "forest = RandomForestClassifier(random_state=1, n_estimators=2000, max_depth=10)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VmRWxFgmOTQa",
        "outputId": "4b307522-0d16-46c4-8c72-dbb452d5c8d2"
      },
      "source": [
        "forest.fit(x_test, y_test)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=10, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=2000,\n",
              "                       n_jobs=None, oob_score=False, random_state=1, verbose=0,\n",
              "                       warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zmzASmJ-0VMP",
        "outputId": "c50ae21c-eb04-4e0a-c7af-474030c2f0c6"
      },
      "source": [
        "f1_score(y_test, forest.predict(x_test))"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_olkW2Kn0VIy"
      },
      "source": [
        "import pickle\r\n",
        "# open a file, where you ant to store the data\r\n",
        "file = open('random_forest_model.pkl', 'wb')\r\n",
        "\r\n",
        "# dump information to that file\r\n",
        "pickle.dump(forest, file)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Shzq4_N434kS"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gvKEnmmR34hx"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IhQEaRnK34fV"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TcVIMhh334cy"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CnwJ0WOe34Zf"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0q5LEd2L34W-"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAfw5T2R34UT"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7pR43-8Y34Rr"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jjeh8Off34PG"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XFTar0qj34Ld"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    }
  ]
}